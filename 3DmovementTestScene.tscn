[gd_scene load_steps=11 format=2]

[ext_resource path="res://Entity/3DPlayerController.tscn" type="PackedScene" id=1]
[ext_resource path="res://Camera.tscn" type="PackedScene" id=2]
[ext_resource path="res://shader/pixelize.gdshader" type="Shader" id=3]
[ext_resource path="res://Entity/testDummy.tscn" type="PackedScene" id=4]

[sub_resource type="CubeMesh" id=1]

[sub_resource type="BoxShape" id=2]
extents = Vector3( 2.55739, 0.524587, 1 )

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 3 )
shader_param/pixelSize = 3

[sub_resource type="QuadMesh" id=7]

[sub_resource type="Shader" id=8]
code = "// NekotoArts YouTube: https://www.youtube.com/channel/UCD7K_FECPHTF0z5okAVlh0g
// Adapted from https://www.shadertoy.com/view/ldsfRn

shader_type spatial;
render_mode unshaded, depth_test_disable;

uniform vec4 edge_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float threshold = 0.0;
uniform float blend = 0.01;
uniform bool enable_depth_pass = true;
uniform float threshold_depth = 0.0;
uniform float blend_depth = 0.01;
uniform float distance_fade_length = 50.0;
uniform float distance_fade_blend = 20.0;

void vertex(){
	VERTEX *= 2.0;
	POSITION = vec4(VERTEX, 1.0);
}

float getGrayScale(sampler2D sampler, vec2 coods){
	vec4 color = texture(sampler,coods);
	float gray = (color.r + color.g + color.b)/3.0;
	return gray;
}

float get_linear_depth(sampler2D sampler, vec2 coords, mat4 ipm){
	float depth = texture(sampler, coords).r;
	vec3 ndc = vec3(coords, depth) * 2.0 - 1.0;
	vec4 view = ipm * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	return linear_depth;
}

void fragment(){
	vec2 delta = vec2(0.0,0.003);
	vec2 SCREEN_PIXEL_SIZE = 1.0 / VIEWPORT_SIZE;
	vec2 iResolution = VIEWPORT_SIZE;
	float m = max(iResolution.x,iResolution.y);
	vec2 texCoords = SCREEN_UV;
	
	vec3 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	
	float c1y = getGrayScale(SCREEN_TEXTURE, texCoords.xy-delta/2.0);
	float c2y = getGrayScale(SCREEN_TEXTURE, texCoords.xy+delta/2.0);
	float c1x = getGrayScale(SCREEN_TEXTURE, texCoords.xy-delta.yx/2.0);
	float c2x = getGrayScale(SCREEN_TEXTURE, texCoords.xy+delta.yx/2.0);
	float dcdx = (c2x - c1x)/(delta.y*10.0);
	float dcdy = (c2y - c1y)/(delta.y*10.0);
	
	vec2 dcdi = vec2(dcdx,dcdy);
	float edge = length(dcdi)/10.0;
	edge = 1.0 - edge;
	edge = smoothstep(threshold, threshold + blend, edge);
	float final_edge = edge;
	
	// Depth-Pass
	if (enable_depth_pass){
		c1y = get_linear_depth(DEPTH_TEXTURE, texCoords.xy-delta/2.0, INV_PROJECTION_MATRIX);
		c2y = get_linear_depth(DEPTH_TEXTURE, texCoords.xy+delta/2.0, INV_PROJECTION_MATRIX);
		c1x = get_linear_depth(DEPTH_TEXTURE, texCoords.xy-delta.yx/2.0, INV_PROJECTION_MATRIX);
		c2x = get_linear_depth(DEPTH_TEXTURE, texCoords.xy+delta.yx/2.0, INV_PROJECTION_MATRIX);
		dcdx = (c2x - c1x)/(delta.y*10.0);
		dcdy = (c2y - c1y)/(delta.y*10.0);
		dcdi = vec2(dcdx,dcdy);
		float depth_edge = length(dcdi)/10.0;
		depth_edge = 1.0 - depth_edge;
		depth_edge = smoothstep(threshold_depth, threshold_depth + blend_depth, depth_edge);
		final_edge *= depth_edge;
	}
	
	// Distance Fading
	float linear_depth = get_linear_depth(DEPTH_TEXTURE, SCREEN_UV, INV_PROJECTION_MATRIX);
	float df = 1.0 - smoothstep(distance_fade_length, distance_fade_length + distance_fade_blend, linear_depth);
	final_edge = (1.0 - final_edge) * df;
	final_edge = 1.0 - final_edge;
	
	ALBEDO = mix(edge_color.rgb, screen_color.rgb, final_edge);
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/edge_color = Color( 0, 0, 0, 1 )
shader_param/threshold = 0.0
shader_param/blend = 0.01
shader_param/enable_depth_pass = true
shader_param/threshold_depth = 0.0
shader_param/blend_depth = 0.01
shader_param/distance_fade_length = 50.0
shader_param/distance_fade_blend = 20.0

[node name="Spatial" type="Spatial"]

[node name="StaticBody" type="StaticBody" parent="."]

[node name="MeshInstance" type="MeshInstance" parent="StaticBody"]
transform = Transform( 2.563, 0, 0, 0, 0.533, 0, 0, 0, 1, 0, -0.541, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="StaticBody"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.521675, 0 )
shape = SubResource( 2 )

[node name="StaticBody2" type="StaticBody" parent="."]
transform = Transform( 0.46311, -0.886301, 0, 0.886301, 0.46311, 0, 0, 0, 1, 7.61927, 4.49979, 0 )

[node name="MeshInstance" type="MeshInstance" parent="StaticBody2"]
transform = Transform( 2.563, 0, 0, 0, 0.533, 0, 0, 0, 1, 0, -0.541, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="StaticBody2"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.521675, 0 )
shape = SubResource( 2 )

[node name="StaticBody3" type="StaticBody" parent="."]
transform = Transform( -0.803722, -0.595005, 0, 0.595005, -0.803722, 0, 0, 0, 1, -9.09619, 6.52883, 0 )

[node name="MeshInstance" type="MeshInstance" parent="StaticBody3"]
transform = Transform( 2.563, 0, 0, 0, 0.533, 0, 0, 0, 1, 0, -0.541, 0 )
mesh = SubResource( 1 )
skeleton = NodePath("../..")
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="StaticBody3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.521675, 0 )
shape = SubResource( 2 )

[node name="PlayerController" parent="." instance=ExtResource( 1 )]
maxSpeed = 10

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 10 )
margin_right = 1920.0
margin_bottom = 1080.0
grow_horizontal = 2
grow_vertical = 2
rect_scale = Vector2( 1.00818, 1.01323 )

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1920, 1080 )
size_override_stretch = true
handle_input_locally = false
msaa = 4
fxaa = true
render_target_update_mode = 3

[node name="Camera" parent="ViewportContainer/Viewport" instance=ExtResource( 2 )]
transform = Transform( -1, 0, -1.50996e-07, 0, 1, 0, 1.50996e-07, 0, -1, -0.0894885, 1.44541, -5.17702 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -1
follow_viewport_enable = true

[node name="outlineMesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.0183, 2.82569 )
visible = false
extra_cull_margin = 16384.0
mesh = SubResource( 7 )
material/0 = SubResource( 9 )

[node name="testDummy" parent="." instance=ExtResource( 4 )]

[connection signal="area_entered" from="testDummy" to="testDummy" method="_on_testDummy_area_entered"]
